# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
import snake_pb2 as snake__pb2

class SnakeStub(object):
    def __init__(self, channel):
        self.Step = channel.unary_unary(
            '/snake.Snake/Step',
            request_serializer=snake__pb2.StepRequest.SerializeToString,
            response_deserializer=snake__pb2.StepResponse.FromString)
        self.Reset = channel.unary_unary(
            '/snake.Snake/Reset',
            request_serializer=snake__pb2.ResetRequest.SerializeToString,
            response_deserializer=snake__pb2.ResetResponse.FromString)

class SnakeServicer(object):
    def Step(self, request, context):
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        raise NotImplementedError('Method not implemented!')

def add_SnakeServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Step': grpc.unary_unary_rpc_method_handler(
            servicer.Step,
            request_deserializer=snake__pb2.StepRequest.FromString,
            response_serializer=snake__pb2.StepResponse.SerializeToString),
        'Reset': grpc.unary_unary_rpc_method_handler(
            servicer.Reset,
            request_deserializer=snake__pb2.ResetRequest.FromString,
            response_serializer=snake__pb2.ResetResponse.SerializeToString),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'snake.Snake', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
